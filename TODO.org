#+STARTUP: showall hidestars

* Roadmap march:

* heuristic
** capture needs to dominate everything
** individual liberties needs to dominate (atari - extend)


* homework:

** age ravemap

* nice to have

** could restore previous uct tree / rave map from engine state, age a little and reuse

** could ponder on previous uct tree / rave map in engine state while waiting for opponent

** wrap UCT in some toplevel object?

** STUArray instead of STVector with thaw and freeze before and updateGameState
*** would need to support all of STVector in Incremental
*** first shift chain ids to signed (so we can tell from array which color the stone is)
*** add border



* tune updateGameState speed
** adjacentStuff is called very often
** policyRaveUCB1 could maybe do less computation


* refactoring
** GameState versus Goban and representation still could be improved

** STVectorGoban
*** toEnum / fromEnum would clearly be better than word(To/From)state

** if copyGoban is used cleverly, maybe runOneRandom could use runST without the RealWorld
*** it seems this would need something like STUArrays thaw / freeze support




* implement zobrist hash of moves / board  / towards transposition tables
** target 64bit word
** suitable as key to DataMap or the like
** quickcheck testing
** http://www.gnu.org/software/gnugo/gnugo_11.html#SEC139




* towards heuristic
** prior: even game more likely
** patterns
** cheap territory estimate - maybe bouzy?



* Data.Tree.UCT
** come back for "negamax if done"?


** possible incremental goban improvement: http://en.wikipedia.org/wiki/Disjoint-set_data_structure



General:
* ko / superko
** naive implementation done
* scoring
** area for now
* timer could be more sophisticated
** low main time and lots of byoyomi will not be used well (will try to complete in main time)
* testing
** quickcheck
** hunit
* profile infrastructure
** http://www.haskell.org/haskellwiki/How_to_profile_a_Haskell_program
* benchmark
** criterion
* better board representation
** more high level stuff
*** incremential group and liberty tracking?



* Data.Goban.UArray
** http://stackoverflow.com/questions/976936/how-to-create-unboxed-mutable-array-instance/978143#978143
** http://www.mail-archive.com/haskell-cafe@haskell.org/msg38528.html
** http://www.mail-archive.com/haskell-cafe@haskell.org/msg38530.html
** http://www.mail-archive.com/haskell-cafe@haskell.org/msg38540.html

Network.GoTextProtocol2.Server:
* merge commandargparserlist and commandHandlers lists
* implement a way so commandHandlers can be passed in from an inheriting module running startLoop

Network.GoTextProtocol2.Parser:
* handle #-prefix comments and empty lines
* handle preprocessing (as described on: http://www.lysator.liu.se/~gunnar/gtp/gtp2-spec-draft2/gtp2-spec.html)
